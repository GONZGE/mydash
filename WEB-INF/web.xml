<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd"
    version="2.5">

  <description>
	  Website for tracking maintenance and fuel efficiency on a number of vehicles
  </description>
  <display-name>MyDash</display-name>
  
  <servlet>
    <description>
      The single Controller for this application.
      The Controller handles all requests for a given servlet.
      The Controller calls various Action classes, based on the URL.
      Some applications will have more than one Controller/Servlet.
    </description>
    <servlet-name>Controller</servlet-name>
    <servlet-class>hirondelle.web4j.Controller</servlet-class>

    <init-param>  
      <description>
        Rounding behavior for the Decimal class. 
        Default value :  'HALF_EVEN,2'
        Comma-separated pair of values: java.math.RoundingMode, 
        and number of decimals to be used to round the results of 
        multiplication and division operations.
        See Money.init() for more information.
      </description>
      <param-name>DecimalStyle</param-name>
      <param-value>HALF_EVEN,2</param-value>
    </init-param>  
    <init-param>
      <description>
       Example value : 'com.blah' - do not include any trailing dot.
       Used by the Controller's default mechanism for mapping URLs to Actions.
      </description>
      <param-name>ImplicitMappingRemoveBasePackage</param-name>
      <param-value>hirondelle.mydash</param-value>
    </init-param>
    <init-param>
      <description>
        Location for logging file. Uses JDK logging. Both the framework and your app will 
        output to the same file.
        MUST END WITH a directory separator.
        Example :'C:\log\electricity\'.
      </description>
      <param-name>LoggingDirectory</param-name>
      <param-value>/Users/Eric/logs/mydash/</param-value>
    </init-param>
    <init-param>
      <description>
       Logging levels for various loggers. 
       Used by hirondelle.web4j.webmaster.LoggingConfigImpl.
      </description>
      <param-name>LoggingLevels</param-name>
      <param-value> hirondelle.mydash.level=FINE, hirondelle.web4j.level=FINEST</param-value>
    </init-param>
    
    <init-param>  
      <description>
        Value : (true | false), ignores case.
        Indicates if the database and driver support the method
        Connection.prepareStatement(SqlText, Statement.RETURN_GENERATED_KEYS).
      </description>
      <param-name>HasAutoGeneratedKeys</param-name>
      <param-value>true</param-value> 
    </init-param>  
    
    <init-param>  
      <description>
        The error code returned by SQLException.getErrorCode()
        when trying to add a duplicate record.
      </description>
      <param-name>ErrorCodeForDuplicateKey</param-name>
      <param-value>1062</param-value>
    </init-param>  
    <init-param>  
      <param-name>DefaultDbConnectionString</param-name>
      <param-value>java:comp/env/jdbc/mydash</param-value>
    </init-param>  

    <load-on-startup>5</load-on-startup>
    
</servlet>

<!-- These multiple Controller mappings are needed only if you use extensions to define operations, not parameters. -->
<!-- Such a style eases implementing fine-grained security constraints, -->
<!-- which depend on knowing operations with more precision than simply GET and POST. -->
<servlet-mapping>
  <servlet-name>Controller</servlet-name>
  <url-pattern>*.list</url-pattern>
</servlet-mapping>
<servlet-mapping>
  <servlet-name>Controller</servlet-name>
  <url-pattern>*.fetchForChange</url-pattern>
</servlet-mapping>
<servlet-mapping>
  <servlet-name>Controller</servlet-name>
  <url-pattern>*.change</url-pattern>
</servlet-mapping>
<servlet-mapping>
  <servlet-name>Controller</servlet-name>
  <url-pattern>*.add</url-pattern>
</servlet-mapping>
<servlet-mapping>
  <servlet-name>Controller</servlet-name>
  <url-pattern>*.delete</url-pattern>
</servlet-mapping>

<session-config>
  <session-timeout>15</session-timeout> <!-- minutes -->
</session-config>

<welcome-file-list>
  <welcome-file>index.html</welcome-file>
</welcome-file-list>

<!-- Custom error pages -->
<error-page>
  <exception-type>javax.servlet.ServletException</exception-type>
   <location>/Error.html</location>
</error-page>
<error-page>
  <error-code>500</error-code> <!-- InternalServerError -->
   <location>/Error.html</location>
</error-page>
<error-page>
  <error-code>400</error-code> <!-- Bad Requests : hacks, bad bugs, spam. -->
   <location>/ErrorBadRequest.html</location>
</error-page>
<error-page>
  <error-code>403</error-code> <!-- Access Denied, Not Authorized. -->
   <location>/ErrorAccessDenied.html</location>
</error-page>
<error-page>
  <error-code>503</error-code> <!-- ServiceUnavailable -->
  <location>/Error.html</location>
</error-page>

  <jsp-config>

    <jsp-property-group>
      <url-pattern>*.jsp</url-pattern>    
      <include-prelude>/WEB-INF/JspHeader.jspf</include-prelude>
    </jsp-property-group>

    <taglib>
      <taglib-uri>/web4j</taglib-uri>
      <taglib-location>/WEB-INF/tlds/web4j.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>http://java.sun.com/jsp/jstl/core</taglib-uri>
      <taglib-location>/WEB-INF/tlds/c.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>http://java.sun.com/jsp/jstl/fmt</taglib-uri>
      <taglib-location>/WEB-INF/tlds/fmt.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>http://java.sun.com/jsp/jstl/functions</taglib-uri>
      <taglib-location>/WEB-INF/tlds/fn.tld</taglib-location>
    </taglib>
  </jsp-config>
  
  <resource-ref>
   <description>DB Connection Pool For Main Application</description>
   <res-ref-name>jdbc/mydash</res-ref-name>
   <res-type>javax.sql.DataSource</res-type>
   <res-auth>Container</res-auth> 
  </resource-ref>
  
</web-app>